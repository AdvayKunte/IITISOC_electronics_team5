$date
	Wed Jun 19 14:55:59 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module testbench $end
$var wire 1 ! clk $end
$var wire 1 " RegWrite $end
$var wire 1 # RegDst $end
$var wire 5 $ OpFn [4:0] $end
$var wire 1 % NIA $end
$var wire 1 & MemWrite $end
$var wire 1 ' MemToReg $end
$var wire 1 ( MemRead $end
$var wire 1 ) ALUSrc $end
$var wire 3 * ALUFn [2:0] $end
$var reg 1 + rst $end
$scope module c1 $end
$var reg 1 ! clk $end
$upscope $end
$scope module cp $end
$var wire 5 , OpFn [4:0] $end
$var reg 3 - ALUFn [2:0] $end
$var reg 1 ) ALUSrc $end
$var reg 1 ( MemRead $end
$var reg 1 ' MemToReg $end
$var reg 1 & MemWrite $end
$var reg 1 % NIA $end
$var reg 1 # RegDst $end
$var reg 1 " RegWrite $end
$upscope $end
$scope module d $end
$var wire 3 . ALUFn [2:0] $end
$var wire 1 ) ALUSrc $end
$var wire 8 / FinalB [7:0] $end
$var wire 1 ( MemRead $end
$var wire 1 ' MemToReg $end
$var wire 1 & MemWrite $end
$var wire 1 % NIA $end
$var wire 1 # RegDst $end
$var wire 1 " RegWrite $end
$var wire 1 ! clk $end
$var wire 1 + rst $end
$var wire 1 0 tALU $end
$var wire 8 1 tDecode [7:0] $end
$var wire 16 2 tInst [15:0] $end
$var wire 8 3 tIR [7:0] $end
$var wire 1 4 alubeq $end
$var wire 8 5 alu_out [7:0] $end
$var wire 8 6 ToMux [7:0] $end
$var wire 8 7 SignExtendedImm [7:0] $end
$var wire 3 8 Rd [2:0] $end
$var wire 3 9 Rb [2:0] $end
$var wire 3 : Ra [2:0] $end
$var wire 3 ; RDo [2:0] $end
$var wire 5 < OpFn [4:0] $end
$var wire 8 = MemReg [7:0] $end
$var wire 8 > Immj [7:0] $end
$var wire 7 ? Immi [6:0] $end
$var wire 8 @ B [7:0] $end
$var wire 8 A A [7:0] $end
$scope module AL $end
$var wire 8 B Rb [7:0] $end
$var wire 3 C alufn [2:0] $end
$var wire 8 D Ra [7:0] $end
$var reg 8 E alu_out [7:0] $end
$var reg 1 4 alubeq $end
$upscope $end
$scope module DE $end
$var wire 3 F rd_i [2:0] $end
$var wire 3 G rb_i [2:0] $end
$var wire 3 H ra_i [2:0] $end
$var wire 16 I inst [15:0] $end
$var wire 8 J immj [7:0] $end
$var wire 7 K immi [6:0] $end
$var reg 5 L opfn [4:0] $end
$upscope $end
$scope module IR $end
$var wire 16 M inst [15:0] $end
$var wire 8 N add [7:0] $end
$upscope $end
$scope module M $end
$var wire 8 O outB [7:0] $end
$var wire 1 ) sel $end
$var wire 1 P out $end
$var wire 8 Q inB [7:0] $end
$var wire 8 R imm [7:0] $end
$upscope $end
$scope module MEM $end
$var wire 8 S aluout_in [7:0] $end
$var wire 1 ! clk $end
$var wire 1 ( mem_read $end
$var wire 1 & mem_write $end
$var wire 8 T address_in [7:0] $end
$var reg 8 U memtoreg_out [7:0] $end
$upscope $end
$scope module MU $end
$var wire 8 V alu_in [7:0] $end
$var wire 8 W mem_in [7:0] $end
$var wire 1 ' memtoreg_sel $end
$var wire 8 X mux_out [7:0] $end
$upscope $end
$scope module PC $end
$var wire 1 0 branch $end
$var wire 1 ! clk $end
$var wire 8 Y im [7:0] $end
$var wire 1 % nia $end
$var wire 8 Z pc [7:0] $end
$var wire 1 + rst $end
$var reg 8 [ add [7:0] $end
$upscope $end
$scope module RF $end
$var wire 8 \ Mem_to_Reg [7:0] $end
$var wire 3 ] RA [2:0] $end
$var wire 3 ^ RB [2:0] $end
$var wire 1 " RegWrite $end
$var wire 1 ! clk $end
$var wire 3 _ RDo [2:0] $end
$var reg 8 ` A [7:0] $end
$var reg 8 a B [7:0] $end
$upscope $end
$scope module Rmux $end
$var wire 3 b RB [2:0] $end
$var wire 3 c RDi [2:0] $end
$var wire 1 # RegDst $end
$var reg 3 d RDo [2:0] $end
$upscope $end
$scope module SE $end
$var wire 7 e Imm7 [6:0] $end
$var wire 8 f Imm8 [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b11100010 f
b1100010 e
bx d
b10 c
b1 b
bx a
bx `
bx _
b1 ^
b11 ]
bx \
b0 [
b0 Z
bz Y
bx X
bx W
bx V
bx U
bx T
bx S
b11100010 R
bx Q
xP
bz O
b0 N
b1100010011001 M
b11 L
b1100010 K
b10011001 J
b1100010011001 I
b11 H
b1 G
b10 F
bx E
bx D
b11 C
bz B
bx A
bx @
b1100010 ?
b10011001 >
bx =
b11 <
bx ;
b11 :
b1 9
b10 8
b11100010 7
bx 6
bx 5
04
b0 3
b1100010011001 2
bz 1
z0
bz /
b11 .
b11 -
b11 ,
1+
b11 *
0)
0(
1'
0&
1%
b11 $
1#
1"
0!
$end
#2000
b10 ;
b10 _
b10 d
#4000
1!
#8000
0!
#10000
0+
#12000
b10 *
b10 -
b10 .
b10 C
b11010 >
b11010 J
b11000100 7
b11000100 R
b11000100 f
b1000100 ?
b1000100 K
b1000100 e
b100 8
b100 F
b100 c
b10 9
b10 G
b10 ^
b10 b
b10 $
b10 ,
b10 <
b10 L
b1 Z
b1000100011010 2
b1000100011010 I
b1000100011010 M
b1 3
b1 N
b1 [
1!
#14000
b100 ;
b100 _
b100 d
#16000
0!
#20000
0P
1)
b100 *
b100 -
b100 .
b100 C
0#
b11011 >
b11011 J
b100100 7
b100100 R
b100100 f
b100100 ?
b100100 K
b100100 e
b11 9
b11 G
b11 ^
b11 b
b1xx $
b1xx ,
b1xx <
b1xx L
b10 Z
b10100100011011 2
b10100100011011 I
b10100100011011 M
b10 3
b10 N
b10 [
1!
#22000
b11 ;
b11 _
b11 d
#24000
0!
#28000
1&
b110 *
b110 -
b110 .
b110 C
0"
0'
b11110 >
b11110 J
b110 9
b110 G
b110 ^
b110 b
b11xx $
b11xx ,
b11xx <
b11xx L
b11 Z
b110100100011110 2
b110100100011110 I
b110100100011110 M
b11 3
b11 N
b11 [
1!
#30000
b110 ;
b110 _
b110 d
#32000
0!
#36000
xP
bx >
bx J
bx 7
bx R
bx f
bx ?
bx K
bx e
bx 8
bx F
bx c
bx 9
bx G
bx ^
bx b
bx :
bx H
bx ]
bx $
bx ,
bx <
bx L
b100 Z
bx 2
bx I
bx M
b100 3
b100 N
b100 [
1!
#38000
bx ;
bx _
bx d
#40000
0!
#44000
b101 Z
b101 3
b101 N
b101 [
1!
#48000
0!
#52000
b110 Z
b110 3
b110 N
b110 [
1!
#56000
0!
#60000
b111 Z
b111 3
b111 N
b111 [
1!
#64000
0!
#68000
b1000 Z
b1000 3
b1000 N
b1000 [
1!
#72000
0!
#76000
b1001 Z
b1001 3
b1001 N
b1001 [
1!
#80000
0!
